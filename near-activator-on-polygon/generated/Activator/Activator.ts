// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AcceptOwner extends ethereum.Event {
  get params(): AcceptOwner__Params {
    return new AcceptOwner__Params(this);
  }
}

export class AcceptOwner__Params {
  _event: AcceptOwner;

  constructor(event: AcceptOwner) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ActivationFailed extends ethereum.Event {
  get params(): ActivationFailed__Params {
    return new ActivationFailed__Params(this);
  }
}

export class ActivationFailed__Params {
  _event: ActivationFailed;

  constructor(event: ActivationFailed) {
    this._event = event;
  }

  get near_account(): string {
    return this._event.parameters[0].value.toString();
  }

  get activationInfo(): ActivationFailedActivationInfoStruct {
    return changetype<ActivationFailedActivationInfoStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class ActivationFailedActivationInfoStruct extends ethereum.Tuple {
  get payer(): Address {
    return this[0].toAddress();
  }

  get price(): BigInt {
    return this[1].toBigInt();
  }

  get publicKey(): string {
    return this[2].toString();
  }

  get status(): i32 {
    return this[3].toI32();
  }
}

export class ActivationRequest extends ethereum.Event {
  get params(): ActivationRequest__Params {
    return new ActivationRequest__Params(this);
  }
}

export class ActivationRequest__Params {
  _event: ActivationRequest;

  constructor(event: ActivationRequest) {
    this._event = event;
  }

  get near_account(): string {
    return this._event.parameters[0].value.toString();
  }

  get activationInfo(): ActivationRequestActivationInfoStruct {
    return changetype<ActivationRequestActivationInfoStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class ActivationRequestActivationInfoStruct extends ethereum.Tuple {
  get payer(): Address {
    return this[0].toAddress();
  }

  get price(): BigInt {
    return this[1].toBigInt();
  }

  get publicKey(): string {
    return this[2].toString();
  }

  get status(): i32 {
    return this[3].toI32();
  }
}

export class ActivationSuccess extends ethereum.Event {
  get params(): ActivationSuccess__Params {
    return new ActivationSuccess__Params(this);
  }
}

export class ActivationSuccess__Params {
  _event: ActivationSuccess;

  constructor(event: ActivationSuccess) {
    this._event = event;
  }

  get near_account(): string {
    return this._event.parameters[0].value.toString();
  }

  get activationInfo(): ActivationSuccessActivationInfoStruct {
    return changetype<ActivationSuccessActivationInfoStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class ActivationSuccessActivationInfoStruct extends ethereum.Tuple {
  get payer(): Address {
    return this[0].toAddress();
  }

  get price(): BigInt {
    return this[1].toBigInt();
  }

  get publicKey(): string {
    return this[2].toString();
  }

  get status(): i32 {
    return this[3].toI32();
  }
}

export class Refund extends ethereum.Event {
  get params(): Refund__Params {
    return new Refund__Params(this);
  }
}

export class Refund__Params {
  _event: Refund;

  constructor(event: Refund) {
    this._event = event;
  }

  get near_account(): string {
    return this._event.parameters[0].value.toString();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SetPaused extends ethereum.Event {
  get params(): SetPaused__Params {
    return new SetPaused__Params(this);
  }
}

export class SetPaused__Params {
  _event: SetPaused;

  constructor(event: SetPaused) {
    this._event = event;
  }

  get paused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class SetPrice extends ethereum.Event {
  get params(): SetPrice__Params {
    return new SetPrice__Params(this);
  }
}

export class SetPrice__Params {
  _event: SetPrice;

  constructor(event: SetPrice) {
    this._event = event;
  }

  get price(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TransferOwner extends ethereum.Event {
  get params(): TransferOwner__Params {
    return new TransferOwner__Params(this);
  }
}

export class TransferOwner__Params {
  _event: TransferOwner;

  constructor(event: TransferOwner) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdrawl extends ethereum.Event {
  get params(): Withdrawl__Params {
    return new Withdrawl__Params(this);
  }
}

export class Withdrawl__Params {
  _event: Withdrawl;

  constructor(event: Withdrawl) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Activator__activationInfoOfResult {
  value0: Address;
  value1: BigInt;
  value2: string;
  value3: i32;

  constructor(value0: Address, value1: BigInt, value2: string, value3: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    return map;
  }

  getPayer(): Address {
    return this.value0;
  }

  getPrice(): BigInt {
    return this.value1;
  }

  getPublicKey(): string {
    return this.value2;
  }

  getStatus(): i32 {
    return this.value3;
  }
}

export class Activator extends ethereum.SmartContract {
  static bind(address: Address): Activator {
    return new Activator("Activator", address);
  }

  accrued(): BigInt {
    let result = super.call("accrued", "accrued():(uint256)", []);

    return result[0].toBigInt();
  }

  try_accrued(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("accrued", "accrued():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activationInfoOf(param0: string): Activator__activationInfoOfResult {
    let result = super.call(
      "activationInfoOf",
      "activationInfoOf(string):(address,uint256,string,uint8)",
      [ethereum.Value.fromString(param0)]
    );

    return new Activator__activationInfoOfResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toString(),
      result[3].toI32()
    );
  }

  try_activationInfoOf(
    param0: string
  ): ethereum.CallResult<Activator__activationInfoOfResult> {
    let result = super.tryCall(
      "activationInfoOf",
      "activationInfoOf(string):(address,uint256,string,uint8)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Activator__activationInfoOfResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toString(),
        value[3].toI32()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  price(): BigInt {
    let result = super.call("price", "price():(uint256)", []);

    return result[0].toBigInt();
  }

  try_price(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("price", "price():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get price_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnerCall extends ethereum.Call {
  get inputs(): AcceptOwnerCall__Inputs {
    return new AcceptOwnerCall__Inputs(this);
  }

  get outputs(): AcceptOwnerCall__Outputs {
    return new AcceptOwnerCall__Outputs(this);
  }
}

export class AcceptOwnerCall__Inputs {
  _call: AcceptOwnerCall;

  constructor(call: AcceptOwnerCall) {
    this._call = call;
  }
}

export class AcceptOwnerCall__Outputs {
  _call: AcceptOwnerCall;

  constructor(call: AcceptOwnerCall) {
    this._call = call;
  }
}

export class ActivateCall extends ethereum.Call {
  get inputs(): ActivateCall__Inputs {
    return new ActivateCall__Inputs(this);
  }

  get outputs(): ActivateCall__Outputs {
    return new ActivateCall__Outputs(this);
  }
}

export class ActivateCall__Inputs {
  _call: ActivateCall;

  constructor(call: ActivateCall) {
    this._call = call;
  }

  get accountName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get publicKey(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ActivateCall__Outputs {
  _call: ActivateCall;

  constructor(call: ActivateCall) {
    this._call = call;
  }
}

export class PostResultCall extends ethereum.Call {
  get inputs(): PostResultCall__Inputs {
    return new PostResultCall__Inputs(this);
  }

  get outputs(): PostResultCall__Outputs {
    return new PostResultCall__Outputs(this);
  }
}

export class PostResultCall__Inputs {
  _call: PostResultCall;

  constructor(call: PostResultCall) {
    this._call = call;
  }

  get accountName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get success(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class PostResultCall__Outputs {
  _call: PostResultCall;

  constructor(call: PostResultCall) {
    this._call = call;
  }
}

export class RefundCall extends ethereum.Call {
  get inputs(): RefundCall__Inputs {
    return new RefundCall__Inputs(this);
  }

  get outputs(): RefundCall__Outputs {
    return new RefundCall__Outputs(this);
  }
}

export class RefundCall__Inputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }

  get accountName(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class RefundCall__Outputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class SetPausedCall extends ethereum.Call {
  get inputs(): SetPausedCall__Inputs {
    return new SetPausedCall__Inputs(this);
  }

  get outputs(): SetPausedCall__Outputs {
    return new SetPausedCall__Outputs(this);
  }
}

export class SetPausedCall__Inputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }

  get paused_(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedCall__Outputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}

export class SetPriceCall extends ethereum.Call {
  get inputs(): SetPriceCall__Inputs {
    return new SetPriceCall__Inputs(this);
  }

  get outputs(): SetPriceCall__Outputs {
    return new SetPriceCall__Outputs(this);
  }
}

export class SetPriceCall__Inputs {
  _call: SetPriceCall;

  constructor(call: SetPriceCall) {
    this._call = call;
  }

  get price_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPriceCall__Outputs {
  _call: SetPriceCall;

  constructor(call: SetPriceCall) {
    this._call = call;
  }
}

export class TransferOwnerCall extends ethereum.Call {
  get inputs(): TransferOwnerCall__Inputs {
    return new TransferOwnerCall__Inputs(this);
  }

  get outputs(): TransferOwnerCall__Outputs {
    return new TransferOwnerCall__Outputs(this);
  }
}

export class TransferOwnerCall__Inputs {
  _call: TransferOwnerCall;

  constructor(call: TransferOwnerCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnerCall__Outputs {
  _call: TransferOwnerCall;

  constructor(call: TransferOwnerCall) {
    this._call = call;
  }
}

export class WithdrawAccruedCall extends ethereum.Call {
  get inputs(): WithdrawAccruedCall__Inputs {
    return new WithdrawAccruedCall__Inputs(this);
  }

  get outputs(): WithdrawAccruedCall__Outputs {
    return new WithdrawAccruedCall__Outputs(this);
  }
}

export class WithdrawAccruedCall__Inputs {
  _call: WithdrawAccruedCall;

  constructor(call: WithdrawAccruedCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawAccruedCall__Outputs {
  _call: WithdrawAccruedCall;

  constructor(call: WithdrawAccruedCall) {
    this._call = call;
  }
}
