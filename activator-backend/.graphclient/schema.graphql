schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type AcceptOwner {
  id: Bytes!
  owner: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input AcceptOwner_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  owner: Bytes
  owner_not: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum AcceptOwner_orderBy {
  id
  owner
  blockNumber
  blockTimestamp
  transactionHash
}

type ActivationFailed {
  id: Bytes!
  near_account: String!
  activationInfo_payer: Bytes!
  activationInfo_price: BigInt!
  activationInfo_publicKey: String!
  activationInfo_status: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input ActivationFailed_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  near_account: String
  near_account_not: String
  near_account_gt: String
  near_account_lt: String
  near_account_gte: String
  near_account_lte: String
  near_account_in: [String!]
  near_account_not_in: [String!]
  near_account_contains: String
  near_account_contains_nocase: String
  near_account_not_contains: String
  near_account_not_contains_nocase: String
  near_account_starts_with: String
  near_account_starts_with_nocase: String
  near_account_not_starts_with: String
  near_account_not_starts_with_nocase: String
  near_account_ends_with: String
  near_account_ends_with_nocase: String
  near_account_not_ends_with: String
  near_account_not_ends_with_nocase: String
  activationInfo_payer: Bytes
  activationInfo_payer_not: Bytes
  activationInfo_payer_in: [Bytes!]
  activationInfo_payer_not_in: [Bytes!]
  activationInfo_payer_contains: Bytes
  activationInfo_payer_not_contains: Bytes
  activationInfo_price: BigInt
  activationInfo_price_not: BigInt
  activationInfo_price_gt: BigInt
  activationInfo_price_lt: BigInt
  activationInfo_price_gte: BigInt
  activationInfo_price_lte: BigInt
  activationInfo_price_in: [BigInt!]
  activationInfo_price_not_in: [BigInt!]
  activationInfo_publicKey: String
  activationInfo_publicKey_not: String
  activationInfo_publicKey_gt: String
  activationInfo_publicKey_lt: String
  activationInfo_publicKey_gte: String
  activationInfo_publicKey_lte: String
  activationInfo_publicKey_in: [String!]
  activationInfo_publicKey_not_in: [String!]
  activationInfo_publicKey_contains: String
  activationInfo_publicKey_contains_nocase: String
  activationInfo_publicKey_not_contains: String
  activationInfo_publicKey_not_contains_nocase: String
  activationInfo_publicKey_starts_with: String
  activationInfo_publicKey_starts_with_nocase: String
  activationInfo_publicKey_not_starts_with: String
  activationInfo_publicKey_not_starts_with_nocase: String
  activationInfo_publicKey_ends_with: String
  activationInfo_publicKey_ends_with_nocase: String
  activationInfo_publicKey_not_ends_with: String
  activationInfo_publicKey_not_ends_with_nocase: String
  activationInfo_status: Int
  activationInfo_status_not: Int
  activationInfo_status_gt: Int
  activationInfo_status_lt: Int
  activationInfo_status_gte: Int
  activationInfo_status_lte: Int
  activationInfo_status_in: [Int!]
  activationInfo_status_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum ActivationFailed_orderBy {
  id
  near_account
  activationInfo_payer
  activationInfo_price
  activationInfo_publicKey
  activationInfo_status
  blockNumber
  blockTimestamp
  transactionHash
}

type ActivationRequest {
  id: Bytes!
  near_account: String!
  activationInfo_payer: Bytes!
  activationInfo_price: BigInt!
  activationInfo_publicKey: String!
  activationInfo_status: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input ActivationRequest_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  near_account: String
  near_account_not: String
  near_account_gt: String
  near_account_lt: String
  near_account_gte: String
  near_account_lte: String
  near_account_in: [String!]
  near_account_not_in: [String!]
  near_account_contains: String
  near_account_contains_nocase: String
  near_account_not_contains: String
  near_account_not_contains_nocase: String
  near_account_starts_with: String
  near_account_starts_with_nocase: String
  near_account_not_starts_with: String
  near_account_not_starts_with_nocase: String
  near_account_ends_with: String
  near_account_ends_with_nocase: String
  near_account_not_ends_with: String
  near_account_not_ends_with_nocase: String
  activationInfo_payer: Bytes
  activationInfo_payer_not: Bytes
  activationInfo_payer_in: [Bytes!]
  activationInfo_payer_not_in: [Bytes!]
  activationInfo_payer_contains: Bytes
  activationInfo_payer_not_contains: Bytes
  activationInfo_price: BigInt
  activationInfo_price_not: BigInt
  activationInfo_price_gt: BigInt
  activationInfo_price_lt: BigInt
  activationInfo_price_gte: BigInt
  activationInfo_price_lte: BigInt
  activationInfo_price_in: [BigInt!]
  activationInfo_price_not_in: [BigInt!]
  activationInfo_publicKey: String
  activationInfo_publicKey_not: String
  activationInfo_publicKey_gt: String
  activationInfo_publicKey_lt: String
  activationInfo_publicKey_gte: String
  activationInfo_publicKey_lte: String
  activationInfo_publicKey_in: [String!]
  activationInfo_publicKey_not_in: [String!]
  activationInfo_publicKey_contains: String
  activationInfo_publicKey_contains_nocase: String
  activationInfo_publicKey_not_contains: String
  activationInfo_publicKey_not_contains_nocase: String
  activationInfo_publicKey_starts_with: String
  activationInfo_publicKey_starts_with_nocase: String
  activationInfo_publicKey_not_starts_with: String
  activationInfo_publicKey_not_starts_with_nocase: String
  activationInfo_publicKey_ends_with: String
  activationInfo_publicKey_ends_with_nocase: String
  activationInfo_publicKey_not_ends_with: String
  activationInfo_publicKey_not_ends_with_nocase: String
  activationInfo_status: Int
  activationInfo_status_not: Int
  activationInfo_status_gt: Int
  activationInfo_status_lt: Int
  activationInfo_status_gte: Int
  activationInfo_status_lte: Int
  activationInfo_status_in: [Int!]
  activationInfo_status_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum ActivationRequest_orderBy {
  id
  near_account
  activationInfo_payer
  activationInfo_price
  activationInfo_publicKey
  activationInfo_status
  blockNumber
  blockTimestamp
  transactionHash
}

type ActivationSuccess {
  id: Bytes!
  near_account: String!
  activationInfo_payer: Bytes!
  activationInfo_price: BigInt!
  activationInfo_publicKey: String!
  activationInfo_status: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input ActivationSuccess_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  near_account: String
  near_account_not: String
  near_account_gt: String
  near_account_lt: String
  near_account_gte: String
  near_account_lte: String
  near_account_in: [String!]
  near_account_not_in: [String!]
  near_account_contains: String
  near_account_contains_nocase: String
  near_account_not_contains: String
  near_account_not_contains_nocase: String
  near_account_starts_with: String
  near_account_starts_with_nocase: String
  near_account_not_starts_with: String
  near_account_not_starts_with_nocase: String
  near_account_ends_with: String
  near_account_ends_with_nocase: String
  near_account_not_ends_with: String
  near_account_not_ends_with_nocase: String
  activationInfo_payer: Bytes
  activationInfo_payer_not: Bytes
  activationInfo_payer_in: [Bytes!]
  activationInfo_payer_not_in: [Bytes!]
  activationInfo_payer_contains: Bytes
  activationInfo_payer_not_contains: Bytes
  activationInfo_price: BigInt
  activationInfo_price_not: BigInt
  activationInfo_price_gt: BigInt
  activationInfo_price_lt: BigInt
  activationInfo_price_gte: BigInt
  activationInfo_price_lte: BigInt
  activationInfo_price_in: [BigInt!]
  activationInfo_price_not_in: [BigInt!]
  activationInfo_publicKey: String
  activationInfo_publicKey_not: String
  activationInfo_publicKey_gt: String
  activationInfo_publicKey_lt: String
  activationInfo_publicKey_gte: String
  activationInfo_publicKey_lte: String
  activationInfo_publicKey_in: [String!]
  activationInfo_publicKey_not_in: [String!]
  activationInfo_publicKey_contains: String
  activationInfo_publicKey_contains_nocase: String
  activationInfo_publicKey_not_contains: String
  activationInfo_publicKey_not_contains_nocase: String
  activationInfo_publicKey_starts_with: String
  activationInfo_publicKey_starts_with_nocase: String
  activationInfo_publicKey_not_starts_with: String
  activationInfo_publicKey_not_starts_with_nocase: String
  activationInfo_publicKey_ends_with: String
  activationInfo_publicKey_ends_with_nocase: String
  activationInfo_publicKey_not_ends_with: String
  activationInfo_publicKey_not_ends_with_nocase: String
  activationInfo_status: Int
  activationInfo_status_not: Int
  activationInfo_status_gt: Int
  activationInfo_status_lt: Int
  activationInfo_status_gte: Int
  activationInfo_status_lte: Int
  activationInfo_status_in: [Int!]
  activationInfo_status_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum ActivationSuccess_orderBy {
  id
  near_account
  activationInfo_payer
  activationInfo_price
  activationInfo_publicKey
  activationInfo_status
  blockNumber
  blockTimestamp
  transactionHash
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  acceptOwner(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AcceptOwner
  acceptOwners(
    skip: Int = 0
    first: Int = 100
    orderBy: AcceptOwner_orderBy
    orderDirection: OrderDirection
    where: AcceptOwner_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AcceptOwner!]!
  activationFailed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActivationFailed
  activationFaileds(
    skip: Int = 0
    first: Int = 100
    orderBy: ActivationFailed_orderBy
    orderDirection: OrderDirection
    where: ActivationFailed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActivationFailed!]!
  activationRequest(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActivationRequest
  activationRequests(
    skip: Int = 0
    first: Int = 100
    orderBy: ActivationRequest_orderBy
    orderDirection: OrderDirection
    where: ActivationRequest_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActivationRequest!]!
  activationSuccess(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActivationSuccess
  activationSuccesses(
    skip: Int = 0
    first: Int = 100
    orderBy: ActivationSuccess_orderBy
    orderDirection: OrderDirection
    where: ActivationSuccess_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActivationSuccess!]!
  refund(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Refund
  refunds(
    skip: Int = 0
    first: Int = 100
    orderBy: Refund_orderBy
    orderDirection: OrderDirection
    where: Refund_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Refund!]!
  setPaused(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetPaused
  setPauseds(
    skip: Int = 0
    first: Int = 100
    orderBy: SetPaused_orderBy
    orderDirection: OrderDirection
    where: SetPaused_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SetPaused!]!
  setPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetPrice
  setPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: SetPrice_orderBy
    orderDirection: OrderDirection
    where: SetPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SetPrice!]!
  transferOwner(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransferOwner
  transferOwners(
    skip: Int = 0
    first: Int = 100
    orderBy: TransferOwner_orderBy
    orderDirection: OrderDirection
    where: TransferOwner_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TransferOwner!]!
  withdrawl(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdrawl
  withdrawls(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdrawl_orderBy
    orderDirection: OrderDirection
    where: Withdrawl_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdrawl!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Refund {
  id: Bytes!
  near_account: String!
  to: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input Refund_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  near_account: String
  near_account_not: String
  near_account_gt: String
  near_account_lt: String
  near_account_gte: String
  near_account_lte: String
  near_account_in: [String!]
  near_account_not_in: [String!]
  near_account_contains: String
  near_account_contains_nocase: String
  near_account_not_contains: String
  near_account_not_contains_nocase: String
  near_account_starts_with: String
  near_account_starts_with_nocase: String
  near_account_not_starts_with: String
  near_account_not_starts_with_nocase: String
  near_account_ends_with: String
  near_account_ends_with_nocase: String
  near_account_not_ends_with: String
  near_account_not_ends_with_nocase: String
  to: Bytes
  to_not: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Refund_orderBy {
  id
  near_account
  to
  amount
  blockNumber
  blockTimestamp
  transactionHash
}

type SetPaused {
  id: Bytes!
  paused: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input SetPaused_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  paused: Boolean
  paused_not: Boolean
  paused_in: [Boolean!]
  paused_not_in: [Boolean!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum SetPaused_orderBy {
  id
  paused
  blockNumber
  blockTimestamp
  transactionHash
}

type SetPrice {
  id: Bytes!
  price: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input SetPrice_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum SetPrice_orderBy {
  id
  price
  blockNumber
  blockTimestamp
  transactionHash
}

type Subscription {
  acceptOwner(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AcceptOwner
  acceptOwners(
    skip: Int = 0
    first: Int = 100
    orderBy: AcceptOwner_orderBy
    orderDirection: OrderDirection
    where: AcceptOwner_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AcceptOwner!]!
  activationFailed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActivationFailed
  activationFaileds(
    skip: Int = 0
    first: Int = 100
    orderBy: ActivationFailed_orderBy
    orderDirection: OrderDirection
    where: ActivationFailed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActivationFailed!]!
  activationRequest(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActivationRequest
  activationRequests(
    skip: Int = 0
    first: Int = 100
    orderBy: ActivationRequest_orderBy
    orderDirection: OrderDirection
    where: ActivationRequest_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActivationRequest!]!
  activationSuccess(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActivationSuccess
  activationSuccesses(
    skip: Int = 0
    first: Int = 100
    orderBy: ActivationSuccess_orderBy
    orderDirection: OrderDirection
    where: ActivationSuccess_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActivationSuccess!]!
  refund(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Refund
  refunds(
    skip: Int = 0
    first: Int = 100
    orderBy: Refund_orderBy
    orderDirection: OrderDirection
    where: Refund_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Refund!]!
  setPaused(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetPaused
  setPauseds(
    skip: Int = 0
    first: Int = 100
    orderBy: SetPaused_orderBy
    orderDirection: OrderDirection
    where: SetPaused_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SetPaused!]!
  setPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetPrice
  setPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: SetPrice_orderBy
    orderDirection: OrderDirection
    where: SetPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SetPrice!]!
  transferOwner(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransferOwner
  transferOwners(
    skip: Int = 0
    first: Int = 100
    orderBy: TransferOwner_orderBy
    orderDirection: OrderDirection
    where: TransferOwner_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TransferOwner!]!
  withdrawl(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdrawl
  withdrawls(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdrawl_orderBy
    orderDirection: OrderDirection
    where: Withdrawl_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdrawl!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type TransferOwner {
  id: Bytes!
  to: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input TransferOwner_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  to: Bytes
  to_not: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum TransferOwner_orderBy {
  id
  to
  blockNumber
  blockTimestamp
  transactionHash
}

type Withdrawl {
  id: Bytes!
  amount: BigInt!
  to: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input Withdrawl_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  to: Bytes
  to_not: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Withdrawl_orderBy {
  id
  amount
  to
  blockNumber
  blockTimestamp
  transactionHash
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}